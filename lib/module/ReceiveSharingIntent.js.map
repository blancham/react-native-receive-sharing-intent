{"version":3,"sources":["ReceiveSharingIntent.ts"],"names":["Platform","Linking","AppState","NativeModules","Utils","ReceiveSharingIntent","ReceiveSharingIntentModule","OS","getReceivedFiles","handler","errorHandler","protocol","isIos","getInitialURL","then","res","startsWith","isClear","getFileNames","catch","addEventListener","url","status","clearReceivedFiles","data","files","utils","sortData","e","fileObject","Object","keys","map","k"],"mappings":"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","sourcesContent":["import type {\n  IReceiveSharingIntent,\n  IUtils,\n} from './ReceiveSharingIntent.interfaces';\nimport { Platform, Linking, AppState, NativeModules } from 'react-native';\nimport Utils from './utils';\n\nconst { ReceiveSharingIntent } = NativeModules;\n\nclass ReceiveSharingIntentModule implements IReceiveSharingIntent {\n  private isIos: boolean = Platform.OS === 'ios';\n  private utils: IUtils = new Utils();\n  private isClear: boolean = false;\n\n  getReceivedFiles(\n    handler: Function,\n    errorHandler: Function,\n    protocol: string = 'ShareMedia'\n  ) {\n    if (this.isIos) {\n      Linking.getInitialURL()\n        .then((res: any) => {\n          if (!res) {\n            return handler([]);\n          }\n          if (res.startsWith(`${protocol}://dataUrl`) && !this.isClear) {\n            this.getFileNames(handler, errorHandler, res);\n          }\n        })\n        .catch(() => {});\n      Linking.addEventListener('url', (res: any) => {\n        const url = res ? res.url : '';\n        if (url.startsWith(`${protocol}://dataUrl`) && !this.isClear) {\n          this.getFileNames(handler, errorHandler, res.url);\n        }\n      });\n    } else {\n      AppState.addEventListener('change', (status: string) => {\n        if (status === 'active' && !this.isClear) {\n          this.getFileNames(handler, errorHandler, '');\n        }\n      });\n      if (!this.isClear) this.getFileNames(handler, errorHandler, '');\n    }\n  }\n\n  clearReceivedFiles() {\n    this.isClear = true;\n  }\n\n  protected getFileNames(\n    handler: Function,\n    errorHandler: Function,\n    url: string\n  ) {\n    if (this.isIos) {\n      ReceiveSharingIntent.getFileNames(url)\n        .then((data: any) => {\n          let files = this.utils.sortData(data);\n          handler(files);\n        })\n        .catch((e: any) => errorHandler(e));\n    } else {\n      ReceiveSharingIntent.getFileNames()\n        .then((fileObject: any) => {\n          if (!fileObject) {\n            return handler([]);\n          }\n          let files = Object.keys(fileObject).map((k) => fileObject[k]);\n          handler(files);\n        })\n        .catch((e: any) => errorHandler(e));\n    }\n  }\n}\n\nexport default ReceiveSharingIntentModule;\n"]}