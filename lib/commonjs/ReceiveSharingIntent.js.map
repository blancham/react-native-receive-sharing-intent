{"version":3,"sources":["ReceiveSharingIntent.ts"],"names":["ReceiveSharingIntent","NativeModules","ReceiveSharingIntentModule","Platform","OS","Utils","getReceivedFiles","handler","errorHandler","protocol","isIos","Linking","getInitialURL","then","res","startsWith","getFileNames","catch","addEventListener","url","AppState","status","clearReceivedFiles","clearFileNames","data","files","utils","sortData","e","fileObject","Object","keys","map","k"],"mappings":";;;;;;;AAIA;;AACA;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,0BAAjC;;AAEA,MAAMC,0BAAN,CAAkE;AAAA;AAAA,mCACvCC,sBAASC,EAAT,KAAgB,KADuB;;AAAA,mCAExC,IAAIC,cAAJ,EAFwC;AAAA;;AAIhEC,EAAAA,gBAAgB,CACdC,OADc,EAEdC,YAFc,EAGdC,QAAgB,GAAG,YAHL,EAId;AACA,QAAI,KAAKC,KAAT,EAAgB;AACdC,2BAAQC,aAAR,GACGC,IADH,CACSC,GAAD,IAAc;AAClB,YAAI,CAACA,GAAL,EAAU;AACR,iBAAOP,OAAO,CAAC,EAAD,CAAd;AACD;;AACD,YAAIO,GAAG,CAACC,UAAJ,CAAgB,GAAEN,QAAS,YAA3B,CAAJ,EAA6C;AAC3C,eAAKO,YAAL,CAAkBT,OAAlB,EAA2BC,YAA3B,EAAyCM,GAAzC;AACD;AACF,OARH,EASGG,KATH,CASS,MAAM,CAAE,CATjB;;AAUAN,2BAAQO,gBAAR,CAAyB,KAAzB,EAAiCJ,GAAD,IAAc;AAC5C,cAAMK,GAAG,GAAGL,GAAG,GAAGA,GAAG,CAACK,GAAP,GAAa,EAA5B;;AACA,YAAIA,GAAG,CAACJ,UAAJ,CAAgB,GAAEN,QAAS,YAA3B,CAAJ,EAA6C;AAC3C,eAAKO,YAAL,CAAkBT,OAAlB,EAA2BC,YAA3B,EAAyCM,GAAG,CAACK,GAA7C;AACD;AACF,OALD;AAMD,KAjBD,MAiBO;AACLC,4BAASF,gBAAT,CAA0B,QAA1B,EAAqCG,MAAD,IAAoB;AACtD,YAAIA,MAAM,KAAK,QAAf,EAAyB;AACvB,eAAKL,YAAL,CAAkBT,OAAlB,EAA2BC,YAA3B,EAAyC,EAAzC;AACD;AACF,OAJD;;AAKA,WAAKQ,YAAL,CAAkBT,OAAlB,EAA2BC,YAA3B,EAAyC,EAAzC;AACD;AACF;;AAEDc,EAAAA,kBAAkB,GAAG;AACnBtB,IAAAA,oBAAoB,CAACuB,cAArB;AACD;;AAESP,EAAAA,YAAY,CACpBT,OADoB,EAEpBC,YAFoB,EAGpBW,GAHoB,EAIpB;AACA,QAAI,KAAKT,KAAT,EAAgB;AACdV,MAAAA,oBAAoB,CAACgB,YAArB,CAAkCG,GAAlC,EACGN,IADH,CACSW,IAAD,IAAe;AACnB,YAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBH,IAApB,CAAZ;AACAjB,QAAAA,OAAO,CAACkB,KAAD,CAAP;AACD,OAJH,EAKGR,KALH,CAKUW,CAAD,IAAYpB,YAAY,CAACoB,CAAD,CALjC;AAMD,KAPD,MAOO;AACL5B,MAAAA,oBAAoB,CAACgB,YAArB,GACGH,IADH,CACSgB,UAAD,IAAqB;AACzB,YAAI,CAACA,UAAL,EAAiB;AACf,iBAAOtB,OAAO,CAAC,EAAD,CAAd;AACD;;AACD,YAAIkB,KAAK,GAAGK,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,GAAxB,CAA6BC,CAAD,IAAOJ,UAAU,CAACI,CAAD,CAA7C,CAAZ;AACA1B,QAAAA,OAAO,CAACkB,KAAD,CAAP;AACD,OAPH,EAQGR,KARH,CAQUW,CAAD,IAAYpB,YAAY,CAACoB,CAAD,CARjC;AASD;AACF;;AA/D+D;;eAkEnD1B,0B","sourcesContent":["import type {\n  IReceiveSharingIntent,\n  IUtils,\n} from './ReceiveSharingIntent.interfaces';\nimport { Platform, Linking, AppState, NativeModules } from 'react-native';\nimport Utils from './utils';\n\nconst { ReceiveSharingIntent } = NativeModules;\n\nclass ReceiveSharingIntentModule implements IReceiveSharingIntent {\n  private isIos: boolean = Platform.OS === 'ios';\n  private utils: IUtils = new Utils();\n\n  getReceivedFiles(\n    handler: Function,\n    errorHandler: Function,\n    protocol: string = 'ShareMedia'\n  ) {\n    if (this.isIos) {\n      Linking.getInitialURL()\n        .then((res: any) => {\n          if (!res) {\n            return handler([]);\n          }\n          if (res.startsWith(`${protocol}://dataUrl`)) {\n            this.getFileNames(handler, errorHandler, res);\n          }\n        })\n        .catch(() => {});\n      Linking.addEventListener('url', (res: any) => {\n        const url = res ? res.url : '';\n        if (url.startsWith(`${protocol}://dataUrl`)) {\n          this.getFileNames(handler, errorHandler, res.url);\n        }\n      });\n    } else {\n      AppState.addEventListener('change', (status: string) => {\n        if (status === 'active') {\n          this.getFileNames(handler, errorHandler, '');\n        }\n      });\n      this.getFileNames(handler, errorHandler, '');\n    }\n  }\n\n  clearReceivedFiles() {\n    ReceiveSharingIntent.clearFileNames();\n  }\n\n  protected getFileNames(\n    handler: Function,\n    errorHandler: Function,\n    url: string\n  ) {\n    if (this.isIos) {\n      ReceiveSharingIntent.getFileNames(url)\n        .then((data: any) => {\n          let files = this.utils.sortData(data);\n          handler(files);\n        })\n        .catch((e: any) => errorHandler(e));\n    } else {\n      ReceiveSharingIntent.getFileNames()\n        .then((fileObject: any) => {\n          if (!fileObject) {\n            return handler([]);\n          }\n          let files = Object.keys(fileObject).map((k) => fileObject[k]);\n          handler(files);\n        })\n        .catch((e: any) => errorHandler(e));\n    }\n  }\n}\n\nexport default ReceiveSharingIntentModule;\n"]}